kind: Workflow
metadata:
  generateName: builder
spec:
  entrypoint: schedule-framework-builds
  volumes:
  - name: workdir
    persistentVolumeClaim:
      claimName: my-existing-volume
  imagePullSecrets:
  - name: regcred2
  arguments:
    parameters:
    - name: buildmap
      value: |
        [
        {
        "toolchain": "x86-64-core-i7--glibc--stable-2018.11-1",
        "framework": "mbedtls",
        "commit": "4ccd226cbf087ee78b443e452200dd0486527658",
        "optlvl": "-Os",
        "compiler": "clang"
        }
        ]
    - name: algomap
      value: |
        [
        {
            "algo": "camellia-cbc",
            "keylen": "128"
        }
        ]
  templates:
  - name: schedule-framework-builds
    parallelism: 2
    inputs:
      parameters:
      - name: buildmap
      - name: algomap
    steps:
    - - name: getmapartifact
        template: getmapartifact
        arguments:
          parameters:
            - name: algomap
              value: "{{inputs.parameters.algomap}}"
    - - name: schedule-build
        template: schedule-build
        continueOn:
          failed: false
        arguments:
          parameters:
          - name: toolchain
            value: "{{item.toolchain}}"
          - name: framework
            value: "{{item.framework}}"
          - name: commit
            value: "{{item.commit}}"
          - name: optlvl
            value: "{{item.optlvl}}"
          - name: compiler
            value: "{{item.compiler}}"
          artifacts:
            - name: algomap
              from: "{{steps.getmapartifact.outputs.artifacts.algomap}}"
        withParam: "{{inputs.parameters.buildmap}}"
    - - name: reduce-global
        template: reduce-global
  
  
  - name: schedule-build
    parallelism: 2
    inputs:
      parameters:
      - name: toolchain
      - name: framework
      - name: commit
      - name: optlvl
      - name: compiler
      artifacts:
      - name: algomap
    steps:
    - - name: schedule
        template: build
        continueOn:
          failed: false
        arguments:
          parameters:
          - name: toolchain
            value: "{{inputs.parameters.toolchain}}"
          - name: framework
            value: "{{inputs.parameters.framework}}"
          - name: commit
            value: "{{inputs.parameters.commit}}"
          - name: optlvl
            value: "{{inputs.parameters.optlvl}}"
          - name: compiler
            value: "{{inputs.parameters.compiler}}"
          artifacts:
          - name: algomap
            from: "{{inputs.artifacts.algomap}}"
            path: /build/algomap.json

  - name: build
    inputs:
      parameters:
      - name: toolchain
      - name: framework
      - name: commit
      - name: optlvl
      - name: compiler
      artifacts:
        - name: algomap
          path: /build/algomap.json
    container:
      #image: jumpst3r/builder:eval
      image: docker.io/library/builder2
      imagePullPolicy: Never
      volumeMounts:
      - name: workdir
        mountPath: /mnt/vol
      command:
          - bash
          - '-c'
      args:
          - >-
            python3 builder.py {{inputs.parameters.toolchain}} {{inputs.parameters.framework}} {{inputs.parameters.commit}} {{inputs.parameters.optlvl}} {{inputs.parameters.compiler}}

  - name: reduce-global
    script:
      image: python:alpine3.6
      volumeMounts:
      - name: workdir
        mountPath: /mnt/vol
      command: [python]
      source: |
        import glob
        import json
        jlist = glob.glob('/mnt/vol/*.json')
        print("jsonlist:")
        print(jlist)
        final = []
        for r in jlist:
          if '*' not in r:
            continue
          with open(r, 'r') as f:
            res = json.load(f)
          canonicalName = r.split('/')[-1]
          jsondict = {}
          jsondict['toolchain'] = canonicalName.split('*')[0]
          jsondict['framework'] = canonicalName.split('*')[1]
          jsondict['commit'] = canonicalName.split('*')[2]
          jsondict['optlvl'] = canonicalName.split('*')[3]
          jsondict['compiler'] = canonicalName.split('*')[4]
          jsondict['results'] = res
          final.append(res)
        with open('/tmp/result.json', 'w') as f: 
          json.dump(final, f)

    outputs:
      artifacts:
      - name: results
        path: /tmp/result.json
      parameters:
      - name: results
        valueFrom:
          path: /tmp/result.json
  


  - name: getmapartifact
    inputs:
      parameters:
      - name: algomap
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        import json
        algomap = r'''{{inputs.parameters.algomap}}'''
        #algomap = algomap.replace('\\"', '|')
        #algomap = algomap.replace('"', '')
        #algomap = algomap.replace('|', '"')
        print(algomap)
        with open('/tmp/res.json', 'w') as f:
          f.write(algomap)
    outputs:
      artifacts:
      - name: algomap
        path: /tmp/res.json

      