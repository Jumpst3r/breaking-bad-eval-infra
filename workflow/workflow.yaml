kind: Workflow
metadata:
  generateName: builder
spec:
  # must complete in 8h (28,800 seconds)
  # activeDeadlineSeconds: 86400
  # keep workflows for 1d (86,400 seconds)
  # ttlStrategy:
    # secondsAfterCompletion: 86400
  # delete all pods as soon as they complete
  # podGC:
  #   strategy: OnPodCompletion
  entrypoint: schedule-framework-builds
  volumes:
  - name: nfs-volume
    nfs:
      server: 10.0.0.1
      path: /mnt/results
      readOnly: no
  - name: hostpath-volume
    hostPath:
      # Ensure the file directory is created.
      path: /home/mschneider/results
      type: DirectoryOrCreate
  imagePullSecrets:
  - name: regcred
  arguments:
    parameters:
    - name: architectures
      value: |
        ["riscv64", "x86-64", "x86-i686", "aarch64", "mips32el", "armv7"]
    - name: compilers
      value: |
        {
          "gcc": [
            "12.3.0", "13.2.0"
          ],
          "llvm": [
            "16", "17", "18"
          ]
        }
      # value: |
      #   {
      #     "gcc": [
      #       "5.4.0", "6.4.0", "7.3.0", "8.4.0", "9.3.0", "10.3.0", "11.3.0"
      #     ],
      #     "llvm": [
      #       "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"
      #     ]
      #   }
    - name: frameworks
      value: |
        ["haclstar"]
    - name: target-algorithms
      value: |
        "hmac-sha1 hmac-sha2 hmac-blake2 chacha-poly1305 curve25519 ecdh-p256 ecdsa rsa"
      # value: |
      #   "aes-cbc aes-ctr aes-gcm chacha-poly1305 hmac-sha1 hmac-sha2 hmac-blake2 curve25519 ecdh-p256 ecdsa"
      # value: |
      #   "rsa"
    - name: optimizations
      value: |
        ["-O0", "-O1", "-O2", "-O3", "-Os", "-Ofast", "-Oz"]
    - name: commit
      # value: "28f96c2686459add7acedcd97cb841030bdda019" # boringssl "chromium-stable" "28f96c2686459add7acedcd97cb841030bdda019"
      # value: "4fbd4fd" # wolfSSL v5.5.4-stable
      # value: "79c060eea3eea1257797f15ea1608a9a9923aa6f" # bearSSL
      value: "f283af14715cc66ec7481a3ae0ed019cbff4c790" # hacl-star
      # value: "15dc32f" # botan 2.19.3
      # value: "8cc84df" # libsodium stable
      # value: "a92271e" # openssl release 3.1.0
      # value: "1873d3b" # mbedtls 3.4.0
      # value: "3e283ef" # hacl-star new master
      # value: "5fcd47d137f9b556edc7a392035dc2d2f43282ca" # boringssl master
      # value: "advisory-fix-1" # haclstar patch: git@github.com:hacl-star/hacl-star-ghsa-f6wv-mr2p-rh3m.git
  templates:
  - name: schedule-framework-builds
    inputs:
      parameters:
      - name: architectures
      - name: compilers
      - name: frameworks
      - name: target-algorithms
      - name: optimizations
      - name: commit
    steps:
    - - name: permute-params
        template: permute-params
        arguments:
          parameters:
            - name: architectures
              value: "{{inputs.parameters.architectures}}"
            - name: compilers
              value: "{{inputs.parameters.compilers}}"
            - name: frameworks
              value: "{{inputs.parameters.frameworks}}"
            - name: target-algorithms
              value: "{{inputs.parameters.target-algorithms}}"
            - name: optimizations
              value: "{{inputs.parameters.optimizations}}"
            - name: commit
              value: "{{inputs.parameters.commit}}"
    - - name: schedule-build
        template: schedule-build
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: arch
            value: "{{item.arch}}"
          - name: toolchain
            value: "{{item.toolchain}}"
          - name: version
            value: "{{item.version}}"
          - name: framework
            value: "{{item.framework}}"
          - name: target
            value: "{{item.target}}"
          - name: opt
            value: "{{item.opt}}"
          - name: commit
            value: "{{item.commit}}"
          - name: image
            value: "{{item.image}}"
        withParam: "{{steps.permute-params.outputs.parameters.confmap}}"
  
  
  - name: schedule-build
    inputs:
      parameters:
      - name: arch
      - name: toolchain
      - name: version
      - name: framework
      - name: target
      - name: opt
      - name: commit
      - name: image
    parallelism: 8
    steps:
    - - name: schedule
        template: build
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: arch
            value: "{{inputs.parameters.arch}}"
          - name: toolchain
            value: "{{inputs.parameters.toolchain}}"
          - name: version
            value: "{{inputs.parameters.version}}"
          - name: framework
            value: "{{inputs.parameters.framework}}"
          - name: target
            value: "{{inputs.parameters.target}}"
          - name: opt
            value: "{{inputs.parameters.opt}}"
          - name: commit
            value: "{{inputs.parameters.commit}}"
          - name: image
            value: "{{inputs.parameters.image}}"

  - name: build
    # retryStrategy:
    #     limit: "2"
    #     retryPolicy: "Always"
    #     backoff:
    #         duration: "10s"      
    #         factor: "2"
    #         # maxDuration: "10m" 
    # parallelism: 8
    inputs:
      parameters:
      - name: arch
      - name: toolchain
      - name: version
      - name: framework
      - name: target
      - name: opt
      - name: commit
      - name: image
    container:
      image: moschn/microsurf-eval:{{inputs.parameters.image}}
      imagePullPolicy: Always
      volumeMounts:
      # - name: volv
      #   mountPath: /data
      # - name: nfs-volume
      #   mountPath: /data
      - name: hostpath-volume
        mountPath: /data
      # - name: secret-ssh-key     # mount file containing secret at /secret/mountpath
      #   mountPath: "/root/.ssh"
      #   readOnly: true
      resources:
        requests:
          cpu: "8"
          memory: "16Gi"
          # ephemeral-storage: "15Gi"
        limits:
          cpu: "12"
          memory: "32Gi"
        #   ephemeral-storage: "35Gi"
      # command: ["sleep", "infinity"]
      # env:
      #   - name: RAY_memory_monitor_refresh_ms
      #     value: "0"
      # command: [/bin/bash]
      command: ["python3", "run.py"]
      args:
        - -a={{inputs.parameters.arch}}
        - -t={{inputs.parameters.toolchain}}
        - --toolchain-version={{inputs.parameters.version}}
        - -f={{inputs.parameters.framework}}
        - -c={{inputs.parameters.commit}}
        - -o={{inputs.parameters.opt}}
        - --fw-dir=src/frameworks
        - --result-dir=/data
        - -p=config.json
        - "{{inputs.parameters.target}}"
  - name: permute-params
    inputs:
      parameters:
      - name: architectures
      - name: compilers
      - name: frameworks
      - name: target-algorithms
      - name: optimizations
      - name: commit
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        import json
        import os
        import glob
        import time
        import itertools
        archs = json.loads(r'''{{inputs.parameters.architectures}}''')
        comps = json.loads(r'''{{inputs.parameters.compilers}}''')
        fw = json.loads(r'''{{inputs.parameters.frameworks}}''')
        target = json.loads(r'''{{inputs.parameters.target-algorithms}}''')
        opt = json.loads(r'''{{inputs.parameters.optimizations}}''')
        commit = '{{inputs.parameters.commit}}'

        print(archs)
        print(comps)
        out_map = []
        for a, f, o in itertools.product(archs, fw, opt):
          for c, ver in comps.items():
            for v in ver:
              if c == 'gcc':
                if a == 'riscv64' and v not in ['11.3.0', '10.3.0', '12.3.0', '13.2.0']:
                  continue
                elif 'Oz' in o:
                  continue
                else:
                  out_map.append({
                      'arch': a,
                      'toolchain': c,
                      'version': v,
                      'framework': f,
                      'target': target,
                      'opt': o,
                      'image': 'llvm18',
                      'commit': commit
                    })
              else:
                if a == 'riscv64' and v in ['5', '6', '7', '8', '9']:
                  continue
                else:
                  out_map.append({
                    'arch': a,
                    'toolchain': c,
                    'version': v,
                    'framework': f,
                    'target': target,
                    'opt': o,
                    'image': f'llvm{v}',
                    'commit': commit
                  })
        print(out_map)
        with open('/tmp/outmap.json', 'w') as f:
          f.write(str(json.dumps(out_map)))
    outputs:
      parameters:
      - name: confmap
        valueFrom:
          path: /tmp/outmap.json

      
