kind: Workflow
metadata:
  generateName: builder
spec:
  # must complete in 8h (28,800 seconds)
  activeDeadlineSeconds: 86400
  # keep workflows for 1d (86,400 seconds)
  ttlStrategy:
    secondsAfterCompletion: 86400
  # delete all pods as soon as they complete
  # podGC:
  #   strategy: OnPodCompletion
  entrypoint: schedule-framework-builds
  volumes:
  - name: volv
    persistentVolumeClaim:
      claimName: res-volume
  imagePullSecrets:
  - name: regcred
  arguments:
    parameters:
    - name: architectures
      value: |
        ["riscv64", "x86-64", "x86-i686", "aarch64", "armv7", "mips32el"]
    - name: compilers
      value: |
        {
          "gcc": [
            "10.3.0", "11.3.0"
          ],
          "llvm": [
            "15", "14"
          ]
        }
      # value: |
      #   {
      #     "gcc": [
      #       "5.4.0", "6.4.0", "7.3.0", "8.4.0", "9.3.0", "10.3.0", "11.3.0"
      #     ],
      #     "llvm": [
      #       "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"
      #     ]
      #   }
    - name: frameworks
      value: |
        ["haclstar"]
    - name: target-algorithms
      value: |
        ["chacha-poly1305"]
      # value: |
      #   ["chacha-poly1305", "hmac-sha1", "hmac-sha2", "hmac-blake2", "ecdh-curve25519", "ecdh-p256"]
    - name: optimizations
      value: |
        ["-O0"]
      # value: |
      #   ["-O0", "-O2", "-O3", "-Ofast", "-Os", "-Oz"]
  templates:
  - name: schedule-framework-builds
    inputs:
      parameters:
      - name: architectures
      - name: compilers
      - name: frameworks
      - name: target-algorithms
      - name: optimizations
    steps:
    - - name: permute-params
        template: permute-params
        arguments:
          parameters:
            - name: architectures
              value: "{{inputs.parameters.architectures}}"
            - name: compilers
              value: "{{inputs.parameters.compilers}}"
            - name: frameworks
              value: "{{inputs.parameters.frameworks}}"
            - name: target-algorithms
              value: "{{inputs.parameters.target-algorithms}}"
            - name: optimizations
              value: "{{inputs.parameters.optimizations}}"
    - - name: schedule-build
        template: schedule-build
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: arch
            value: "{{item.arch}}"
          - name: toolchain
            value: "{{item.toolchain}}"
          - name: version
            value: "{{item.version}}"
          - name: framework
            value: "{{item.framework}}"
          - name: target
            value: "{{item.target}}"
          - name: opt
            value: "{{item.opt}}"
          - name: commit
            value: "main"
          - name: image
            value: "{{item.image}}"
        withParam: "{{steps.permute-params.outputs.parameters.confmap}}"
  
  
  - name: schedule-build
    inputs:
      parameters:
      - name: arch
      - name: toolchain
      - name: version
      - name: framework
      - name: target
      - name: opt
      - name: commit
      - name: image
    parallelism: 5
    steps:
    - - name: schedule
        template: build
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: arch
            value: "{{inputs.parameters.arch}}"
          - name: toolchain
            value: "{{inputs.parameters.toolchain}}"
          - name: version
            value: "{{inputs.parameters.version}}"
          - name: framework
            value: "{{inputs.parameters.framework}}"
          - name: target
            value: "{{inputs.parameters.target}}"
          - name: opt
            value: "{{inputs.parameters.opt}}"
          - name: commit
            value: "{{inputs.parameters.commit}}"
          - name: image
            value: "{{inputs.parameters.image}}"

  - name: build
    retryStrategy:
        limit: "3"
        retryPolicy: "Always"
        backoff:
            duration: "10s"      
            factor: "2"
            # maxDuration: "10m" 
    inputs:
      parameters:
      - name: arch
      - name: toolchain
      - name: version
      - name: framework
      - name: target
      - name: opt
      - name: commit
      - name: image
    container:
      image: moschn/microsurf-eval:{{inputs.parameters.image}}
      imagePullPolicy: Always
      volumeMounts:
      - name: volv
        mountPath: /data
      resources:
        requests:
          cpu: "10"
        limits:
          cpu: "16"
      command: [bash, -c]
      args: 
        - >- 
          mkdir test && cd test && ln -s /data ./results && python3 ../run.py -a {{inputs.parameters.arch}} -t {{inputs.parameters.toolchain}} --toolchain-version {{inputs.parameters.version}} -f {{inputs.parameters.framework}} -c {{inputs.parameters.commit}} -o="{{inputs.parameters.opt}}" {{inputs.parameters.target}}
  # - name: reduce-global
  #   retryStrategy:
  #       limit: "3"
  #       backoff:
  #           duration: "3m"      
  #           factor: "2"
  #           maxDuration: "10m"
  #   script:
  #     image: python:alpine3.6
  #     volumeMounts:
  #     - name: volv
  #       mountPath: /mnt/vol
  #     command: [python]
  #     source: |
  #       import glob
  #       import json
  #       jlist = glob.glob('/mnt/vol/*.json')
  #       print("jsonlist:")
  #       print(jlist)
  #       final = []
  #       for r in jlist:
  #         if '*' not in r:
  #           continue
  #         with open(r, 'r') as f:
  #           res = json.load(f)
  #         canonicalName = r.split('/')[-1]
  #         jsondict = {}
  #         jsondict['toolchain'] = canonicalName.split('*')[0]
  #         jsondict['framework'] = canonicalName.split('*')[1]
  #         jsondict['commit'] = canonicalName.split('*')[2]
  #         jsondict['optlvl'] = canonicalName.split('*')[3]
  #         jsondict['compiler'] = canonicalName.split('*')[4]
  #         jsondict['results'] = res
  #         final.append(res)
  #       with open('/mnt/vol/finalres.json', 'w') as f: 
  #         json.dump(final, f)
  #   outputs:
  #     artifacts:
  #     - name: results
  #       path: /mnt/vol/finalres.json
  
  # - name: getmapartifact
  #   inputs:
  #     parameters:
  #     - name: algomap
  #   script:
  #     image: python:alpine3.6
  #     volumeMounts:
  #     - name: volv
  #       mountPath: /mnt/vol
  #     command: [python]
  #     source: |
  #       import json
  #       import os
  #       import glob
  #       import time
  #       files = glob.glob('/mnt/vol/*')
  #       print(files)
  #       algomap = r'''{{inputs.parameters.algomap}}'''
  #       #algomap = algomap.replace('\\"', '|')
  #       #algomap = algomap.replace('"', '')
  #       #algomap = algomap.replace('|', '"')
  #       print(algomap)
  #       with open('/mnt/vol/algomap.json', 'w') as f:
  #         f.write(algomap)
  #       time.sleep(5)
  #       files = glob.glob('/mnt/vol/*')
  #       print(files)

  - name: permute-params
    inputs:
      parameters:
      - name: architectures
      - name: compilers
      - name: frameworks
      - name: target-algorithms
      - name: optimizations
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        import json
        import os
        import glob
        import time
        import itertools
        archs = json.loads(r'''{{inputs.parameters.architectures}}''')
        comps = json.loads(r'''{{inputs.parameters.compilers}}''')
        fw = json.loads(r'''{{inputs.parameters.frameworks}}''')
        target = json.loads(r'''{{inputs.parameters.target-algorithms}}''')
        opt = json.loads(r'''{{inputs.parameters.optimizations}}''')

        print(archs)
        print(comps)
        out_map = []
        for a, f, t, o in itertools.product(archs, fw, target, opt):
          for c, ver in comps.items():
            for v in ver:
              if c == 'gcc':
                out_map.append({
                  'arch': a,
                  'toolchain': c,
                  'version': v,
                  'framework': f,
                  'target': t,
                  'opt': o,
                  'image': 'llvm15'
                })
              else:
                out_map.append({
                  'arch': a,
                  'toolchain': c,
                  'version': v,
                  'framework': f,
                  'target': t,
                  'opt': o,
                  'image': f'llvm{v}'
                })
        print(out_map)
        with open('/tmp/outmap.json', 'w') as f:
          f.write(str(json.dumps(out_map)))
    outputs:
      parameters:
      - name: confmap
        valueFrom:
          path: /tmp/outmap.json

      
